@using MyShoppingCart.Data.ViewModels;
@model ShoppingCartVM

@{
	ViewData["Title"] = "Shopping Cart Summary";
}

<div class="row">
	<div class="col-md-8 offset-2">
		<div class="text-center">
			<h2>You shopping cart summary</h2>
		</div>

		<table class="table">
			<thead>
				<tr>
					<th>Selected amount</th>
					<th>Product</th>
					<th>Price</th>
					<th>Subtotal</th>
					<th></th>
				</tr>
			</thead>
			<tbody>
				@foreach (var item in Model.ShoppingCart.ShoppingCartItems)
				{
					<tr>
						<td class="align-middle">@item.Amount</td>
						<td class="align-middle">@item.Product.Name</td>
						<td class="align-middle">@item.Product.Price.ToString("c")</td>
						<td class="align-middle">@((item.Amount*item.Product.Price).ToString("c"))</td>
						<td class="align-middle">
							<a class="text-danger" asp-controller="Orders" asp-action="RemoveItemFromShoppingCart"
						   asp-route-id="@item.Product.Id">
								<i class="bi bi-cart-dash"></i>
							</a>
							|
							<a class="text-success" asp-controller="Orders" asp-action="AddItemToShoppingCart"
						   asp-route-id="@item.Product.Id">
								<i class="bi bi-cart-plus"></i>
							</a>
						</td>
					</tr>
				}
			</tbody>
			<tfoot>
				<tr>
					<td colspan="2"></td>
					<td><b>Total:</b></td>
					<td>
						@Model.ShoppingCartTotal.ToString("c")
					</td>
					<td></td>
				</tr>
			</tfoot>
		</table>

		<div class="text-right">
			<div class="btn-group">
				@*<a class="btn btn-outline-primary" asp-action="CompleteOrder">
					Complete order
					</a>*@
				<div id="paypal-btn"></div>
				<span style="padding:5px"></span>
				<a class="btn btn-outline-success" asp-controller="Products" asp-action="Index">
					Add more items
				</a>
			</div>
		</div>

	</div>
</div>

@section Scripts{

    @*<script src="https://www.paypalobjects.com/api/checkout.js"></script>

	<script>

	let _total = @Html.Raw(Model.ShoppingCartTotal);

	paypal.Button.render({
	//Configure environment
	env: 'sandbox',
	client: {
	sandbox: 'ARkt6Jy1b8O_wyFiYp2SqJipStPd1BTyNvbtEdi-zi-hYQQgEcwY9f8xzLjheAerXsZPbpJos3NYCnWj'
	},

	//Customize button
	locale: 'en_US',
	style: {
	size: 'small',
	color: 'gold',
	shape: 'pill'
	},
	commit: true,

	//Set up a payment
	payment: function (data, actions) {
	return actions.payment.create({
	transactions: [{
	amount: {
	total: _total,
	currency: 'USD'
	}
	}]
	});
	},

	//Execute the payment
	onAuthorize: function (data, actions) {
	return actions.payment.execute().then(function () {
	var url = '@Url.Action("CompleteOrder", "Orders", new { })';
	window.location.href = url;
	});
	}

	}, '#paypal-btn')
	</script>*@

<script src="https://www.paypal.com/sdk/js?client-id=ARkt6Jy1b8O_wyFiYp2SqJipStPd1BTyNvbtEdi-zi-hYQQgEcwY9f8xzLjheAerXsZPbpJos3NYCnWj&currency=USD"></script>
<script>

	  $(document).ready(function () {
		  let _total = @Html.Raw(Model.ShoppingCartTotal);

	  paypal.Buttons
	  (
		  {
		  // Sets up the transaction when a payment button is clicked
			  createOrder: (data, actions) => {
      return actions.order.create({
         "purchase_units": [{
            "amount": {
              "currency_code": "USD",
              "value": "100",
              "breakdown": {
                "item_total": {  /* Required when including the `items` array */
                  "currency_code": "USD",
                  "value": "100"
                }
              }
            },
            "items": [
              {
                "name": "First Product Name", /* Shows within upper-right dropdown during payment approval */
                "description": "Optional descriptive text..", /* Item details will also be in the completed paypal.com transaction view */
                "unit_amount": {
                  "currency_code": "USD",
                  "value": "50"
                },
                "quantity": "2"
              },
            ]
          }]
      });
    },
	  // Finalize the transaction after payer approval
	  onApprove: (data, actions) =>
	  {
		return actions.order.capture().then
		(function(orderData)
			{
			  // Successful capture! For dev/demo purposes:
			  console.log('Capture result', orderData, JSON.stringify(orderData, null, 2));
			  const transaction = orderData.purchase_units[0].payments.captures[0];
			  alert(`Transaction ${transaction.status}: ${transaction.id}\n\nSee console for all available details`);


			  // When ready to go live, remove the alert and show a success message within this page. For example:
			  // const element = document.getElementById('paypal-button-container');
			  // element.innerHTML = '<h3>Thank you for your payment!</h3>';
			  // Or go to another URL:  actions.redirect('thank_you.html');
			}
		);
	  }
	}).render('#paypal-btn');
		  });



</script>


}
