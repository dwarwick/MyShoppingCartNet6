@using MyShoppingCart.Data.ViewModels
@model SelectProductCategoriesVM
@*@using MyShoppingCart.Data;*@


@{
	ViewData["Title"] = "Select Product Categories";
	ProductCategoryLookup newCategory = new ProductCategoryLookup();
}
@*<link rel="stylesheet" href="~/css/EditCategories/demo.css" />*@
@*<link rel="stylesheet" href="~/css/EditCategories/style.css" />*@

<div class="container">
	<div class="row">
		<div class="col-md-12">
			<h4>Select Product Categories</h4>
		</div>
	</div>

	<div class="row">
		<div class="col-md-8">
			<div class="row justify-content-start">
				<div class="col">

					@{
						<ul class="my-2" style="list-style: none">
							@{
								if (@Model.product.product.productCategory != null)
								{
									foreach (ProductCategory category in @Model.product.product.productCategory)
									{
										string sFullCategoryPath = @Model.editCategoriesVM.lstProductCategoryLookup.Find(y => y.Id == category.ProductCategoryLookupId).CategoryName;

										int iParentCategoryId = category.productCategoryLookup.ParentCategoryId;

										while (iParentCategoryId > 0)
										{
											ProductCategoryLookup parentCategory = @Model.editCategoriesVM.lstProductCategoryLookup.Find(y => y.Id == iParentCategoryId);

											sFullCategoryPath = $"{parentCategory.CategoryName} > {sFullCategoryPath}";

											iParentCategoryId = parentCategory.ParentCategoryId;
										}

										<li class="my-3">
											<a class="text-danger btn btn-danger text-white me-3" href="/Products/DeleteCategoryFromProduct?categoryId=@category.ProductCategoryLookupId&productId=@Model.product.product.Id">
												<i class="bi bi-trash"></i>
											</a>@sFullCategoryPath
										</li>
									}
								}
							}
						</ul>

						int iParentCategory = 0;

						List<ProductCategoryLookup> LevelCategories = Model.editCategoriesVM.lstProductCategoryLookup.Where(x => x.ParentCategoryId == iParentCategory).OrderBy(x => x.CategoryName).ToList();

						foreach (ProductCategoryLookup productCategory in LevelCategories)
						{
							<ul style="list-style: none; margin: 0px">
								@{
									if (DoesSubCategoryExist(productCategory))
										SubCategoryYes(productCategory);
									else
										SubCategoryNo(productCategory);
								}
							</ul>
						}

						string RenderSubcategory(ProductCategoryLookup subCategory)
						{
							string ret = "";
							List<ProductCategoryLookup> SubCategories = Model.editCategoriesVM.lstProductCategoryLookup.Where(x => x.ParentCategoryId == subCategory.Id).OrderBy(x => x.CategoryName).ToList();

							foreach (ProductCategoryLookup item in SubCategories)
							{

								if (DoesSubCategoryExist(item))
									SubCategoryYes(item);
								else
									SubCategoryNo(item);
							}

							return ret;
						}

						bool DoesSubCategoryExist(ProductCategoryLookup parentCategory)
						{
							return Model.editCategoriesVM.lstProductCategoryLookup.Where(x => x.ParentCategoryId == parentCategory.Id).Count() > 0;
						}

						void SubCategoryYes(ProductCategoryLookup category)
						{

							<li class='sub-menu' style="background-color:grey;margin:0px" data-sub-id="@category.Id" ondblclick="AddSubCategory(this);">

								<a style="color:aliceblue"><div class='fa fa-caret-right right'></div>@category.CategoryName</a>
								<ul style="list-style: none; margin: 0px">
									@RenderSubcategory(category)
								</ul>
							</li>
						}

						void SubCategoryNo(ProductCategoryLookup category)
						{
							<li style="background-color: dimgray; margin: 0px" data-sub-id="@category.Id" ondblclick="AddSubCategory(this);"><a style="color:aliceblue">@category.CategoryName</a></li>
						}
					}
				</div>
			</div>
		</div>
	</div>
</div>

@section Scripts
{
<script type="text/javascript">


	function AddSubCategory(elem) {
		event.stopPropagation();

		let jsonData = JSON.parse('@Html.Raw(Json.Serialize(Model.product.product.Id))')

		//const obj = JSON.parse(jsonData);
		console.log(jsonData);

		//var person = document.getElementById("catName").value;
		var Id= $(elem).data('sub-id');

		console.log(`product: ${jsonData}, Id: ${Id}`)

		var request;
		if (window.XMLHttpRequest) {
			//New browsers.
			request = new XMLHttpRequest();
		}


		if (request != null) {
			var url = `/Products/AddCategoryToProduct?productId=${jsonData}&categoryId=${Id}`;
			request.open("POST", url, false);
			//request.setRequestHeader("Content-Type", "text/plain");

			request.onreadystatechange = function () {
				if (request.readyState == 4 && request.status == 200) {
					//console.log(request.responseText);

					//var response = JSON.parse(request.responseText);
					//alert("Hello: " + response.Name + ".\nCurrent Date and Time: " + response.DateTime);
					window.location.reload();
				}
			};
			request.send();
		}

	}

		$('.sub-menu ul').hide();
		$(".sub-menu a").click(function () {
			$(this).parent(".sub-menu").children("ul").slideToggle("100");
			$(this).find(".right").toggleClass("fa-caret-down fa-caret-right");
		});
</script>
}