@*@model IEnumerable<Product>*@
@using MyShoppingCart.Data.ViewModels;
@{
	ViewData["Title"] = "List of Products";
	EditCategoriesVM productCategoryLookup = ViewBag.productCategoryLookup;
}

<div class="row">
	<div class="col-md-2 p-0 overflow-auto">
		@{
			int iParentCategory = 0;

			List<ProductCategoryLookup> LevelCategories = productCategoryLookup.lstProductCategoryLookup.Where(x => x.ParentCategoryId == iParentCategory).OrderBy(x => x.CategoryName).ToList();

			foreach (ProductCategoryLookup productCategory in LevelCategories)
			{
				<ul style="list-style: none; margin: 0px;padding:0px">
					@{
						if (DoesSubCategoryExist(productCategory))
							SubCategoryYes(productCategory);
						else
							SubCategoryNo(productCategory);
					}
				</ul>
			}

			string RenderSubcategory(ProductCategoryLookup subCategory)
			{
				string ret = "";
				List<ProductCategoryLookup> SubCategories = productCategoryLookup.lstProductCategoryLookup.Where(x => x.ParentCategoryId == subCategory.Id).OrderBy(x => x.CategoryName).ToList();

				foreach (ProductCategoryLookup item in SubCategories)
				{

					if (DoesSubCategoryExist(item))
						SubCategoryYes(item);
					else
						SubCategoryNo(item);
				}

				return ret;
			}

			bool DoesSubCategoryExist(ProductCategoryLookup parentCategory)
			{
				return productCategoryLookup.lstProductCategoryLookup.Where(x => x.ParentCategoryId == parentCategory.Id).Count() > 0;
			}

			void SubCategoryYes(ProductCategoryLookup category)
			{

				<li class='sub-menu' style="background-color:grey;margin:0px" data-sub-id="@category.Id" ondblclick="AddSubCategory(this);">

					<a style="color:aliceblue"><i class='fa fa-caret-right right'></i>@category.CategoryName</a>
					<ul style="list-style: none; margin: 0px">
						@RenderSubcategory(category)
					</ul>
				</li>
			}

			void SubCategoryNo(ProductCategoryLookup category)
			{
				<li style="background-color: dimgray; margin: 0px" data-sub-id="@category.Id" ondblclick="AddSubCategory(this);"><a style="color:aliceblue">@category.CategoryName</a></li>
			}
		}
	</div>


	<div class="col" id="product"></div>
</div>





@await Html.PartialAsync("_CreateItem", "Products")

@section Scripts
{
<script type="text/javascript">

	function AddSubCategory(elem) {
		event.stopPropagation();
		
		//get the id
		var categoryId= $(elem).data('sub-id');

		console.log(`Id: ${categoryId}`);

		//call controller Products, controller action GetProductsByCategory?categoryId and pass the categoryId
		//The partial view will be returned and load onto the div id #product
		$('#product').load(`/Products/GetProductsByCategory?categoryId=${categoryId}`);

	}

		$('.sub-menu ul').hide();
		$('#product').load(`/Products/GetProductsByCategory`);//when the index view first loads, load all products (i.e. category -1)
		$(".sub-menu a").click(function () {
			$(this).parent(".sub-menu").children("ul").slideToggle("100");
			$(this).find(".right").toggleClass("fa-caret-down fa-caret-right");
		});
</script>
}